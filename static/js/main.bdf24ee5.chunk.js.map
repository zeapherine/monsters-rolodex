{"version":3,"sources":["componets/card/card.component.jsx","componets/card-list/card-list.component.jsx","componets/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","type","placeholder","onChange","onPressed","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,YAAO,SAACC,GAAD,OACnB,yBAAKC,UAAU,kBACd,yBACCC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,qBAEJ,4BAAKL,EAAMI,QAAQE,KAAnB,KACA,4BAAKN,EAAMI,QAAQG,UCNRC,EAAW,SAACR,GACxB,OACC,yBAAKC,UAAU,aACbD,EAAMS,SAASC,KAAI,SAACN,GAAD,OACnB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCKrBQ,G,YATG,SAACZ,GAAD,OACjB,2BACCC,UAAU,SACVY,KAAK,SACLC,YAAad,EAAMc,YACnBC,SAAUf,EAAMgB,cCuCHC,E,kDA1Cd,aAAe,IAAD,8BACb,gBAqBDC,aAAe,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SApBtC,EAAKC,MAAQ,CACZf,SAAU,GACVY,YAAa,IALD,E,gEAgBO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEX,SAAUoB,S,+BAOnC,IAAD,EAC0BC,KAAKN,MAA/Bf,EADA,EACAA,SAAUY,EADV,EACUA,YACZU,EAAkBtB,EAASuB,QAAO,SAAC5B,GAAD,OACvCA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYc,wBAEjD,OACC,yBAAKlC,UAAU,OACd,+CACA,kBAAC,EAAD,CAAWa,YAAY,iBAAiBE,UAAWc,KAAKZ,eAExD,kBAAC,EAAD,CAAUT,SAAUsB,S,GArCNK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdf24ee5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.component.css\";\n\nexport const Card = (props) => (\n\t<div className=\"card-container\">\n\t\t<img\n\t\t\talt=\"monster\"\n\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2&50x50`}\n\t\t/>\n\t\t<h1>{props.monster.name} </h1>\n\t\t<h2>{props.monster.email}</h2>\n\t</div>\n);\n","import React from \"react\";\nimport \"./card-list.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n\treturn (\n\t\t<div className=\"card-list\">\n\t\t\t{props.monsters.map((monster) => (\n\t\t\t\t<Card key={monster.id} monster={monster} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport \"./search-box.css\";\n\nconst SearchBox = (props) => (\n\t<input\n\t\tclassName=\"search\"\n\t\ttype=\"search\"\n\t\tplaceholder={props.placeholder}\n\t\tonChange={props.onPressed}\n\t/>\n);\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport { CardList } from \"./componets/card-list/card-list.component\";\nimport \"./App.css\";\nimport SearchBox from \"./componets/search-box/search-box.component\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: \"\",\n\t\t};\n\t}\n\n\t//  life cycle method.\n\t/*  componentDidMount() is invoked immediately after a component \n\t\tis mounted (inserted into the tree).\n\t \tInitialization that requires DOM nodes should go here. \n\t \tIf you need to load data from a remote endpoint, this is \n\t \ta good place to instantiate the network request. */\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\") //fetch() returns a promise.\n\t\t\t.then((response) => response.json()) //taking the response(promise) and converting it into a json formate.\n\t\t\t.then((users) => this.setState({ monsters: users })); //taking that json and setting the array monsters.\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonster = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monster Roladex</h1>\n\t\t\t\t<SearchBox placeholder=\"Search Monster\" onPressed={this.handleChange} />\n\n\t\t\t\t<CardList monsters={filteredMonster} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}